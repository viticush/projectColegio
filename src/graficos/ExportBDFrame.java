/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package graficos;

import java.io.File;
import java.io.FileWriter;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import javax.swing.JFileChooser;
import source.Consultas;

/**
 *
 * @author victor
 */
public class ExportBDFrame extends javax.swing.JFrame {

    
    public static ResultSet consulta = null;
    public static ResultSetMetaData metaDatos;
    private final Consultas consultas;
    JFileChooser chooser = new JFileChooser();
    
    /**
     * Creates new form BackupFrame
     */
    public ExportBDFrame() {
        consultas = new Consultas();
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTextField1 = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();

        setTitle("Export BD");

        jLabel1.setText("Browse:");

        jButton1.setText("Accept");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Cancel");

        jLabel2.setText("Choose a directory");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(53, 53, 53)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(44, 44, 44)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(60, 60, 60)
                                .addComponent(jLabel2)))))
                .addContainerGap(47, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(7, 7, 7)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2))
                .addContainerGap(19, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        
        
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ExportBDFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ExportBDFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ExportBDFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ExportBDFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ExportBDFrame().setVisible(true);
            }
        });
    }
    
/*private void crearBackup(String dataBase) throws IOException, SQLException {

        int resp, numColum;       

        resp = chooser.showSaveDialog(this);

        if (resp == JFileChooser.APPROVE_OPTION) { //si el usario presiona el boton aceptar

            File backupFile = new File(String.valueOf(chooser.getSelectedFile().toString()) + "_" + dataBase +  ".sql");
            FileWriter fw = new FileWriter(backupFile);
            fw.write(dataBase);
            fw.write("\n");

            if (dataBase.equals("ALUMNOS")) {
                consulta = consultas.getAlumnos();
                metaDatos = consulta.getMetaData();
                numColum = metaDatos.getColumnCount();
                while (consulta.next()) {
                    for (int i = 1; i <= numColum; i++) {
                        if (i == numColum) {
                            fw.write(consulta.getObject(i).toString() + "\n");
                        } else {
                            fw.write(consulta.getObject(i).toString() + ",");
                        }
                    }
                }
            } else if (dataBase.equals("USUARIOS")) {
                consulta = consultas.getUsuarios();
                metaDatos = consulta.getMetaData();
                numColum = metaDatos.getColumnCount();

                while (consulta.next()) {
                    for (int i = 1; i < numColum; i++) {
                        if (i == numColum - 1) {
                            fw.write(consulta.getObject(i).toString() + "\n");
                        } else {
                            fw.write(consulta.getObject(i).toString() + ",");
                        }
                    }
                }
            } else if (dataBase.equals("NOTAS")){
                consulta = consultas.getNotas();
                metaDatos = consulta.getMetaData();
                numColum = metaDatos.getColumnCount();
                while (consulta.next()) {
                    for (int i = 1; i <= numColum; i++) {
                        if (i == numColum) {
                            fw.write(consulta.getObject(i).toString() + "\n");
                        } else {
                            fw.write(consulta.getObject(i).toString() + ",");
                        }
                    }
                }
            } else if (dataBase.equals("HBIBLIOTECA")){
                consulta = consultas.getHbiblioteca();
                metaDatos = consulta.getMetaData();
                numColum = metaDatos.getColumnCount();
                while (consulta.next()) {
                    for (int i = 1; i <= numColum; i++) {
                        if (i == numColum) {
                            fw.write(consulta.getObject(i).toString() + "\n");
                        } else {
                            fw.write(consulta.getObject(i).toString() + ",");
                        }
                    }
                }
                
            } else if (dataBase.equals("AULAS")){
                consulta = consultas.getAulas();
                metaDatos = consulta.getMetaData();
                numColum = metaDatos.getColumnCount();
                while (consulta.next()) {
                    for (int i = 1; i <= numColum; i++) {
                        if (i == numColum) {
                            fw.write(consulta.getObject(i).toString() + "\n");
                        } else {
                            fw.write(consulta.getObject(i).toString() + ",");
                        }
                    }
                }
                
                
            } else {
                consulta = consultas.getPartesExpulsion();
                metaDatos = consulta.getMetaData();
                numColum = metaDatos.getColumnCount();
                while (consulta.next()) {
                    for (int i = 1; i <= numColum; i++) {
                        if (i == numColum) {
                            fw.write(consulta.getObject(i).toString() + "\n");
                        } else {
                            fw.write(consulta.getObject(i).toString() + ",");
                        }
                    }
                }
                
                
            }
            fw.close();
        }
    }*/

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables
}
